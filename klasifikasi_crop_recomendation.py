# -*- coding: utf-8 -*-
"""Klasifikasi Crop Recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D3jvscB4S2DBJvEKPlTc6NYO3c3K_G2q

## 1. Problem Statement

Proyek ini bertujuan untuk membangun sistem rekomendasi tanaman berdasarkan parameter tanah dan cuaca,
seperti nitrogen (N), phosphorous (P), potassium (K), suhu, kelembaban, pH, dan curah hujan.
Model ini akan memprediksi jenis tanaman yang paling sesuai ditanam berdasarkan data tersebut. Notebook ini juga telah dilengkapi dengan dokumentasi menggunakan text cell untuk menjelaskan setiap tahapan proyek,
mulai dari pemahaman data hingga evaluasi model, sesuai dengan kriteria submission.

## 2. Import Library
"""

#import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB

"""## 3. Memuat Dataset"""

# Load Data
df=pd.read_csv('Crop_recommendation.csv')

#Membaca data
df.head()

"""## 4. Analisis Eksplorasi Data/Data Understanding

Analisis awal dilakukan untuk memahami karakteristik data, mengidentifikasi nilai kosong, dan melihat distribusi variabel.
Termasuk juga visualisasi boxplot untuk mendeteksi outlier pada fitur numerik, pie diagram untuk melihat sebaran data label jenis tanaman, matriks korelasi untuk mengetahui korelasi antar komponen fitur, histogram untuk mengetahui distribusi nilai dari fitur numerik
"""

print(df.shape[0])

df.info()

df.describe()

print("\nUnique Crops:", df['label'].nunique())

print("\nNull Values:")
print(df.isnull().sum())

df.duplicated().sum()

plt.figure(figsize=(12, 6))
df.hist(bins=20, figsize=(12, 6), edgecolor='black')
plt.suptitle("Distribusi Variabel Numerik")
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df.select_dtypes(include=['float64', 'int64']))
plt.title("Boxplot Variabel Numerik")
plt.show()

data=df.select_dtypes(include=['float64', 'int64'])
plt.figure(figsize=(8, 6))
corr_matrix = data.corr()
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Matriks Korelasi")
plt.show()

plt.figure(figsize=(8, 8))
df['label'].value_counts().plot.pie(autopct='%1.1f%%', cmap="viridis", startangle=90)
plt.title("Proporsi Jenis Tanaman")
plt.ylabel("")
plt.show()

"""## 5. Data Preparation

Tahap ini mencakup proses pemisahan data fitur (X) dan label (y), serta encoding label menjadi format numerik agar dapat diproses oleh model machine learning.
"""

X = df.drop('label', axis=1)
y = df['label']

le = LabelEncoder()
y_encoded = le.fit_transform(y)

"""Data kemudian dibagi menjadi data latih dan data uji dengan rasio 80:20
untuk memastikan evaluasi model yang adil dan tidak bias.
"""

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""## 6. Modeling

ada tahap ini, berbagai model machine learning diterapkan:
- Decision Tree
- Random Forest
- K-Nearest Neighbors
- Support Vector Classifier (SVC)
- Gaussian Naive Bayes

Tujuannya adalah membandingkan performa tiap model pada data yang sama.
"""

models = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42, n_estimators=100),
    "KNN": KNeighborsClassifier(),
    "SVC": SVC(),
    "GaussianNB": GaussianNB()
}
results=[]

"""## 7. Evaluasi Model

Tahap ini mengevaluasi performa masing-masing model menggunakan:
- Akurasi
- Precision, Recall, dan F1-score (macro average)
- Confusion Matrix untuk melihat distribusi prediksi
"""

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred)
    classification = classification_report(y_test, y_pred, output_dict=True)
    cm = confusion_matrix(y_test, y_pred)
    results.append([name, accuracy, classification["macro avg"]["precision"], classification["macro avg"]["recall"], classification["macro avg"]["f1-score"]])

    print(f"\n{name} Classification Report:")
    print(pd.DataFrame(classification).transpose())

    # Visualisasi Confusion Matrix
    plt.figure(figsize=(6,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=le.classes_, yticklabels=le.classes_)
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title(f"Confusion Matrix - {name}")
    plt.show()

comparison_df = pd.DataFrame(results, columns=["Model", "Accuracy", "Precision", "Recall", "F1-Score"])
print(comparison_df)

"""## Analisis Performa

**A. Decision Tree**

    - Akurasi: 98.6%
    - Precision/Recall/F1: ≈ 98.6%–98.7%
    - Kesimpulan : Performanya konsisten tinggi, meskipun sedikit di bawah Random Forest dan GaussianNB.
**B. Random Forest**

    - Akurasi: 99.31%
    - Precision, Recall, F1-score: ≈ 99.2%–99.3%
    - Kesimpulan: Random Forest adalah model terbaik secara keseluruhan — sangat stabil, presisi tinggi, dan minim  kesalahan prediksi.

**C. K-Nearest Neighbors (KNN)**

    - Akurasi: 95.6%
    - Precision/Recall/F1: ≈ 95.3%–95.6%
    - Kesimpulan: Kinerja paling rendah. Sensitif terhadap skala dan outlier. Meski cukup baik, kurang disarankan sebagai pilihan utama.

**D. SVC (Support Vector Classifier)**

    - Akurasi: 96.8%
    - Precision/Recall/F1: ≈ 96.6%–96.9%
    - Kesimpulan: Cukup akurat, namun lebih sensitif terhadap skala data dan kemungkinan outlier. Cocok jika ingin model yang tegas dalam decision boundary, tapi tidak lebih unggul dari RF atau NB di kasus ini.

**E. Gaussian Naive Bayes**

    - Akurasi: 99.54% (sedikit lebih tinggi dari Random Forest)
    - Precision/Recall/F1: ≈ 99.6%–99.5%
    - Kesimpulan: Performa sangat kompetitif dan bahkan unggul secara macro average dibanding Random Forest. Model ini sangat ringan secara komputasi dan cocok untuk deployment sederhana.

Dari analisis diatas dapat disimpulkan bahwa model terbaik untuk klasifikasi data tersebut menggunakan model Gaussian Naive Bayes
"""

